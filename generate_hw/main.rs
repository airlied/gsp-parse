use std::env;
use std::fs::File;
use std::collections::HashMap;
use std::io::{BufReader, BufRead, Write};
use serde::{Deserialize, Serialize};

const SPECIAL_TYPES:  [&str;8] = ["NvU32", "NvU64", "NvU16", "NvU8", "NvBool", "char", "NvHandle", "int"];


// start/end are in bits
#[derive(Serialize, Deserialize)]
struct HWStructField {
    start: u32,
    size: u32,
    group_len: u32,
    val_type: String,
}

#[derive(Serialize, Deserialize)]
struct HWStruct {
    fields: Vec<HWStructField>,
}

#[derive(Serialize, Deserialize, Default)]
enum HWDefineType {
    #[default]
    UNKNOWN,
    VALUE,
    VALUE2,
}

#[derive(Serialize, Deserialize, Default)]
struct HWDefine {
    hwtype: HWDefineType,
    val: String,
    // for : sepearated values
    val2: String,
}

#[derive(Serialize, Deserialize, Default)]
struct HWJson {
    version: String,
    defines: HashMap<String, HWDefine>,
    structs: HashMap<String, HWStruct>,
}

fn generate_define(out_writer: &mut File, verstr: &str, defname: &String, define: &HWDefine) -> std::io::Result<()> {
    writeln!(out_writer, "#define {}_{} {}", defname, verstr, define.val)
}

fn generate_define2(out_writer: &mut File, verstr: &str, defname: &String, define: &HWDefine) -> std::io::Result<()> {
    writeln!(out_writer, "#define {}_{} {}:{}", defname, verstr, define.val, define.val2)
}

fn generate_hw_struct(out_writer: &mut File, verstr: &str, strname: &String, hwstruct: &HWStruct) -> std::io::Result<()> {
    writeln!(out_writer, "struct {} {{", strname)?;

    for field in &hwstruct.fields {
	
    }
    Ok(())
}

fn main() -> std::io::Result<()> {
    let args: Vec<String> = env::args().collect();
    let file = File::open(args[1].clone())?;
    let reader = BufReader::new(file);
    let json_input: HWJson = serde_json::from_reader(reader)?;

    let sym_list = File::open(args[2].clone())?;
    let sym_reader = BufReader::new(sym_list);

    let mut out_file = File::create(args[3].clone())?;

    let ver_str = json_input.version.replace(".", "_");
    let def_ver_str = "__NV_HEADER_".to_owned() + ver_str.as_str() + "__";
    writeln!(out_file, "/* This file is autogenerated */")?;
    writeln!(out_file, "#ifndef {}", def_ver_str)?;
    writeln!(out_file, "#define {} 1", def_ver_str)?;
    writeln!(out_file, "#define __NV_VERSION__ {}", json_input.version)?;
    writeln!(out_file)?;

    for base_type in SPECIAL_TYPES {
	writeln!(out_file, "#define {}_{} {}", base_type, ver_str, base_type)?;
    }
    writeln!(out_file)?;
    for sym_name in sym_reader.lines() {
	let name = sym_name.unwrap();

	for (defname, define) in &json_input.defines {
	    if *defname == name {
		match define.hwtype {
		    HWDefineType::VALUE => generate_define(&mut out_file, &ver_str.as_str(), &defname, define),
		    HWDefineType::VALUE2 => generate_define2(&mut out_file, &ver_str.as_str(), &defname, define),
		    HWDefineType::UNKNOWN => todo!(),
		}?;
		writeln!(&out_file).unwrap();
		break;
	    }
	}

	for (strname, structinfo) in &json_input.structs {
	    if *strname == name {

	    }
	}
    }
    writeln!(out_file, "#endif")?;
    Ok(())
}
